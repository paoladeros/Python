Reading & Writing Files with Open

Reading Text Files

One way to read or write a file in Python is to use the built-in 'open' function.
The 'open' function provides a File object that contains the methods and attributes you need in order to read, save, and manipulate the file

file = open (" resources / data / Example.txt", "r")

file represents file object
" resources / data /" is the file path
Example.txt" is the file name
"r" represent the mode

The mode  is the method by which to open the file.
The mode argument is optional and the default value is "r"
There are 3 modes to open a file:

"r" stands for "read" mode
"w" stands for "writw" mode
"a" stands for "append" mode


Reading a File

# Read the Example.txt

example = "Example.txt"
file1 = open(example, "r")

We can view the attributes of the file.

The name of the file:

# Print the path of file

file1.name
'Example.txt'

The mode the file object is in:

# Print the mode of file, either 'r' or 'w'

file1.mode
We can read the file and assign it to a variable :

# Read the file

FileContent = file1.read()
FileContent

The /n means that there is a new line.

We can print the file:

# Print the file with '\n' as a new line

print(FileContent)

The file is of type string:

# Type of file content

type(FileContent)
It is very important that the file is closed in the end. This frees up resources and ensures consistency across different python versions.

# Close file after finish

file1.close()


A Better Way to Open a File

Using the 'with' statement is better practice, it automatically closes the file even if the code encounters an exception.
The code will run everything in the indent block, then close the file object.

# Open file using 'with'

with open(example, "r") as file1:
    FileContent = file1.read()
    print(FileContent)
    
The file object is closed, you can verify it by running:

# Verify if the file is closed

file1.closed

We can see the info in the file:

# See the content of file

print(FileContent)

Let's see the full sintax:

with open ("Example.txt", "r") as file1:
FileContent = file1.read()

print(FileContent)

We don’t have to read the entire file.
For example, we can read the first 4 characters by entering three as a parameter to the method .read():

# Read first four characters

with open(example, "r") as file1:
    print(file1.read(4))
    
Once the method .read(4) is called the first 4 characters are called
If we call the method again, the next 4 characters are called
The output for the following cell will demonstrate the process for different inputs to the method read():

# Read certain amount of characters

with open(example, "r") as file1:
    print(file1.read(4))
    print(file1.read(4))
    print(file1.read(7))
    print(file1.read(15))
    
 We can also read one line of the file at a time using the method 'readline():'

# Read one line

with open(example, "r") as file1:
    print("first line: " + file1.readline())
    
We can also pass an argument to  readline()  to specify the number of charecters we want to read. However, unlike  read(),  readline() can only read one line at most.

with open(example, "r") as file1:
    print(file1.readline(20)) # does not read past the end of line
    print(file1.read(20)) # Returns the next 20 chars

We can use a loop to iterate through each line:

# Iterate through the lines

with open(example,"r") as file1:
        i = 0;
        for line in file1:
            print("Iteration", str(i), ": ", line)
            i = i + 1
            
We can use the method readlines() to save the text file to a list:

# Read all lines and save as a list

with open(example, "r") as file1:
    FileasList = file1.readlines()
Each element of the list corresponds to a line of text:

# Print the first line

FileasList[0]

Print the second line

FileasList[1]

Print the third line

FileasList[2]


Write and Save Files in Python

Writing Files

We can open a file object using the method 'write()' to save the text file to a list.
To write the mode, argument must be set to write "w"
Let’s write a file Example2.txt with the line: “This is line A”

# Write line to file

exmp2 = '/resources/data/Example2.txt'
with open(exmp2, 'w') as writefile:
    writefile.write("This is line A")
    
We can read the file to see if it worked:

# Read file

with open(exmp2, 'r') as testwritefile:
    print(testwritefile.read())
    
We can write multiple lines:

# Write lines to file

with open(exmp2, 'w') as writefile:
    writefile.write("This is line A\n")
    writefile.write("This is line B\n")
    
The method .write() works similar to the method .readline(), except instead of reading a new line it writes a new line.

You can check the file to see if your results are correct

# Check whether write to file

with open(exmp2, 'r') as testwritefile:
    print(testwritefile.read())
    
We write a list to a .txt file as follows:

# Sample list of text

Lines = ["This is line A\n", "This is line B\n", "This is line C\n"]
Lines

# Write the strings in the list to text file

with open('Example2.txt', 'w') as writefile:
    for line in Lines:
        print(line)
        writefile.write(line)
        
We can verify the file is written by reading it and printing out the values:

# Verify if writing to file is successfully executed

with open('Example2.txt', 'r') as testwritefile:
    print(testwritefile.read())
    
However, note that setting the mode to w overwrites all the existing data in the file!

with open('Example2.txt', 'w') as writefile:
    writefile.write("Overwrite\n")
with open('Example2.txt', 'r') as testwritefile:
    print(testwritefile.read())
    

Appending Files

We can write to files without losing any of the existing data as follows by setting the mode argument to append "a"
You can append a new line as follows:

# Write a new line to text file

with open('Example2.txt', 'a') as testwritefile:
    testwritefile.write("This is line C\n")
    testwritefile.write("This is line D\n")
    testwritefile.write("This is line E\n")
    
You can verify the file has changed by running the following cell:

# Verify if the new line is in the text file

with open('Example2.txt', 'r') as testwritefile:
    print(testwritefile.read())


Additional modes

r+ : Reading and writing. Cannot truncate the file.
w+ : Writing and reading. Truncates the file.
a+ : Appending and Reading. Creates a new file, if none exists. You dont have to dwell on the specifics of each mode for this lab.

Let's try out the a+ mode:

with open('Example2.txt', 'a+') as testwritefile:
    testwritefile.write("This is line E\n")
    print(testwritefile.read())
    
There were no errors but read()  also did not output anything. This is because of our location in the file.

Most of the file methods we've looked at work in a certain location in the file.
.write() writes at a certain location in the file.
.read() reads at a certain location in the file and so on.
You can think of this as moving your pointer around in the notepad to make changes at specific location.

Opening the file in w is akin to opening the .txt file, moving your cursor to the beginning of the text file, writing new text and deleting everything that follows.
Whereas opening the file in a is similiar to opening the .txt file, moving your cursor to the very end and then adding the new pieces of text.
It is often very useful to know where the 'cursor' is in a file and be able to control it. The following methods allow us to do precisely this:

.tell() - returns the current position in bytes
.seek(offset,from) - changes the position by 'offset' bytes with respect to 'from'.
                     From can take the value of 0,1,2 corresponding to beginning, relative to current position and end
                     
                     
Now let's revisit a+

with open('Example2.txt', 'a+') as testwritefile:
    print("Initial Location: {}".format(testwritefile.tell()))
    
    data = testwritefile.read()
    if (not data):  #empty strings return false in python
            print('Read nothing') 
    else: 
            print(testwritefile.read())
            
    testwritefile.seek(0,0) # move 0 bytes from beginning.
    
    print("\nNew Location : {}".format(testwritefile.tell()))
    data = testwritefile.read()
    if (not data): 
            print('Read nothing') 
    else: 
            print(data)
    
    print("Location after read: {}".format(testwritefile.tell()) )
    
    
Finally, a note on the difference between w+ and r+.
Both of these modes allow access to read and write methods. However, opening a file in w+ overwrites it and deletes all existing data.
To work with a file on existing data, use r+ and a+. While using r+, it can be useful to add a .truncate() method at the end of your data.
This will reduce the file to your data and delete everything that follows.
In the following code block, Run the code as it is first and then run it with the .truncate().

with open('Example2.txt', 'r+') as testwritefile:
    data = testwritefile.readlines()
    testwritefile.seek(0,0) #write at beginning of file
   
    testwritefile.write("Line 1" + "\n")
    testwritefile.write("Line 2" + "\n")
    testwritefile.write("Line 3" + "\n")
    testwritefile.write("finished\n")
    #Uncomment the line below
    #testwritefile.truncate()
    testwritefile.seek(0,0)
    print(testwritefile.read())
    
    
Copy a File

Let's copy the file Example2.txt to the file Example3.txt:

# Copy file to another

with open('Example2.txt','r') as readfile:
    with open('Example3.txt','w') as writefile:
          for line in readfile:
                writefile.write(line)
We can read the file to see if everything works:

# Verify if the copy is successfully executed

with open('Example3.txt','r') as testwritefile:
    print(testwritefile.read())
    
After reading files, we can also write data into files and save them in different file formats like .txt, .csv, .xls (for excel files) etc.
Now go to the directory to ensure the .txt file exists and contains the summary data that we wrote.
